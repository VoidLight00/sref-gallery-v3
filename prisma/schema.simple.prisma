// Simplified schema for SQLite testing

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  password     String?
  image        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  srefCodes    SrefCode[]
  likes        Like[]
  favorites    Favorite[]
  sessions     Session[]
}

model SrefCode {
  id              String   @id @default(uuid())
  code            String   @unique
  title           String
  description     String?
  promptExamples  String?  // JSON string instead of array
  imageUrl        String?
  featured        Boolean  @default(false)
  premium         Boolean  @default(false)
  viewCount       Int      @default(0)
  likeCount       Int      @default(0)
  favoriteCount   Int      @default(0)
  status          String   @default("ACTIVE")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?
  
  user            User?      @relation(fields: [userId], references: [id])
  categories      CategorySref[]
  tags            TagSref[]
  likes           Like[]
  favorites       Favorite[]
  images          SrefImage[]
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  srefCodes   CategorySref[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  srefCodes TagSref[]
}

model CategorySref {
  id         String   @id @default(uuid())
  categoryId String
  srefCodeId String
  createdAt  DateTime @default(now())
  
  category   Category @relation(fields: [categoryId], references: [id])
  srefCode   SrefCode @relation(fields: [srefCodeId], references: [id])
  
  @@unique([categoryId, srefCodeId])
}

model TagSref {
  id         String   @id @default(uuid())
  tagId      String
  srefCodeId String
  createdAt  DateTime @default(now())
  
  tag        Tag      @relation(fields: [tagId], references: [id])
  srefCode   SrefCode @relation(fields: [srefCodeId], references: [id])
  
  @@unique([tagId, srefCodeId])
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  srefCodeId String
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id])
  srefCode   SrefCode @relation(fields: [srefCodeId], references: [id])
  
  @@unique([userId, srefCodeId])
}

model Favorite {
  id         String   @id @default(uuid())
  userId     String
  srefCodeId String
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id])
  srefCode   SrefCode @relation(fields: [srefCodeId], references: [id])
  
  @@unique([userId, srefCodeId])
}

model SrefImage {
  id         String   @id @default(uuid())
  srefCodeId String
  url        String
  width      Int?
  height     Int?
  format     String?
  createdAt  DateTime @default(now())
  
  srefCode   SrefCode @relation(fields: [srefCodeId], references: [id])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}